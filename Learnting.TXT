So first things first and I think the best thing I learnt in the style this is that she was how quick it was that I was able to create this program for the original name convention was and telling it what I was looking for output.Is very simple and given a fairly standard naming convention to get its pick out the month and the year text.
I don't working on one folder. Then decided that and I wanted to restructure my repository because I wanted to start adding in the testator bit closer to hand. And once attested one folder I wanted to be able to go from a top-level directory and traverse down to subfolders to repeat this process for all the files I had.
I also wasn't sure than we wanted both CSV and the raw file so I made sure it would restrict itself to only work on files that had CSV included in their directory string.The folder set up Python module. This should give a reproducible way of creating a folder structure and Anthony and I go to discuss about making this more standardised even to the point where in theory Git could set up for every new repository recreate as a standard template
I'd already made sure I had an Doc strings and Doc tests to check the specific functions were doing what we anticipated and unwanted create unit tests check program was running as expected it to. It was important that I may try a test that had greater coverage.As a result of an it was important to make sure that my tests knew where my data was as well as where it should be creating its tests. To do this I put it into a separate text file as we did on the Negri project as this is what was agreed by Anthony.I also updated my main file so it could take input in as you run the program from the command line. And this was specifically where the input folder was.And for this I created some other modules I put in the test folder. For a while I can understand why-did not want to import these but it turns out because of the name convention you can't put any file with test at the start of it e.g. "test_folder_location".
It also turns out you have to run a special method to update your test files for it to import the new directory into the system directory for it to know where to look. I had no luck with this so instead what I did was I moved that little snippet of code from that module and put it down in my setup method which seemed most appropriate because this is actually run at runtime.And the programme and got the point where I had 3/5 test running and at this point he was complaining that it was trying to recreate directories only directories where they already exists and this point I'm trying to move towards using marks and fakes rather than using substantiated folder structures to see this will fix the problem.
These boxing fakes are both used in the setup but also in the crucial spots where the code is run. They override the standard practice for an the mock version.

So one thing to keep struggling with his not understanding why it's not finding someone modules in the test environment.
Not hundred percent sure whether or not it's the fact it can't find my files in the system variables are updated correctly or whether or not an summons going on with the actual contents of them to some of my test run.

Also for some reason unable to use breakpoints as standard but I just been working around it and I think got spoken up and I code working and check that the tests work afterwards.

The key thing is I've been using chat GP team parks but I haven't it's not been involved in collecting the things together and I need to be a bit more careful about the keywords meta names are the things that I should be filling in as instructed